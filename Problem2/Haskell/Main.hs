-- Copyright Â© 2014 Edward O'Callaghan. All Rights Reserved.
--

-- Problem Source: Project Eular - Problem 2.
-- ******************************************

-- Each new term in the Fibonacci sequence is generated by adding the previous
-- two terms. By starting with 1 and 2, the first 10 terms will be:
--
--   1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--
-- By considering the terms in the Fibonacci sequence whose values do not
-- exceed four million, find the sum of the even-valued terms.

module Main where

import Data.Natural

--
-- Upper bound of "four million"
upperBound :: Int
upperBound = 4 * 10^(6 :: Int)

--
-- Generate infinte list of fibonacci numbers.
fibs :: [Natural]
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

--
-- Filter a list of Naturals down to a list of even Naturals
evenList :: [Natural] -> [Natural]
evenList = filter even

--
-- Sum up to some given bound n
sumup :: Int -> Natural
sumup n = sum (evenList (take n fibs))

--
-- Calculate answer..
main :: IO ()
main = print (sumup upperBound)
-- answer: ???
